# print environment
# takes a param that is a string to search for
e() {
    # Define colors
    GREEN="\033[0;32m"
    YELLOW="\033[1;33m"
    NC="\033[0m" # No Color

    # Print matched environment variables with highlighting for the search term
    printenv | grep -i --color=always "$1" | sort

    # Count matches and print the total with color
    matches=$(printenv | grep -i -c "$1")
    printf "${YELLOW}Matches: ${GREEN}${matches}${NC}\n"
}

# conn - Display active TCP/UDP connections with owning process and user
#
# This function wraps `ss -lntup` to list all active and listening network sockets,
# showing the associated process ID and user (OWNER) for each entry.
#
# Features:
# - Works on modern Linux distributions (no need for deprecated `netstat`)
# - Adds an OWNER column by extracting the PID from each `ss` line and resolving
#   the user with `ps`
# - Supports optional search term filtering (e.g. port, PID, process name)
# - Writes output to a temporary file to count matches and cleanly format results
#
# Usage:
#   dp                → list all active TCP/UDP sockets with user info
#   dp 8080           → filter only entries matching '8080' (case-insensitive)
#
# Requirements:
# - `ss` (from `iproute2`) must be installed (default on most distros)
# - `sudo` is used to ensure all processes (not just user-owned) are visible
#
# Example Output:
#   Netid State   Recv-Q Send-Q Local Address:Port  Peer Address:Port  Process           OWNER
conn() {
    local search_term="$1"
    local tmpfile="/tmp/conn_matches.log"

    # Get all TCP/UDP sockets including connected ones (no -l)
    local ss_output
    ss_output=$(sudo ss -ntup 2>/dev/null)

    # Skip if no output
    if [[ -z "$ss_output" ]]; then
        echo "No output from ss. Are there any active connections?"
        return 1
    fi

    # Optionally filter
    if [[ -n "$search_term" ]]; then
        echo "Searching for processes matching: $search_term"
        ss_output=$(echo "$ss_output" | grep -i "$search_term")
    else
        echo "Listing all active and listening connections..."
    fi

    if [[ -z "$ss_output" ]]; then
        echo "No matching connections found."
        return 0
    fi

    echo "$ss_output" | while IFS= read -r line; do
        if [[ "$line" =~ ^Netid ]]; then
            echo -e "${line}\tOWNER"
        elif [[ -n "$line" ]]; then
            local pid=$(echo "$line" | grep -oP 'pid=\K[0-9]+')
            if [[ "$pid" =~ ^[0-9]+$ ]]; then
                local owner=$(ps -o user= -p "$pid" 2>/dev/null || echo "N/A")
                echo -e "${line}\t${owner}"
            else
                echo -e "${line}\tN/A"
            fi
        fi
    done | tee "$tmpfile"

    local match_count
    match_count=$(wc -l < "$tmpfile")
    echo "Matches: $match_count"
    rm -f "$tmpfile"
}


