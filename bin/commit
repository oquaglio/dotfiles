#!/bin/bash

# This script helps to write a conventional commit message interactively.

# Allow the user to select a commit type.
TYPE=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert")

# Define common scopes (including "Other" for custom input)
SCOPES=( "app" "pipeline" "data" "infra" "ci" "test" "core" "api" "ui" "backend" "cli" "docs" "config" "deps" "build" "lint" "i18n" "auth" "db" "cache" "security" "logging" "notis" "styles" "theme" "ux" "a11y" "Other" )

# Allow user to select a scope
SELECTED_SCOPE=$(printf "%s\n" "${SCOPES[@]}" | gum choose --header "ðŸŽ¯ Select a commit scope:")

# If user chooses "Other", prompt for a custom scope
if [ "$SELECTED_SCOPE" = "Other" ]; then
    CUSTOM_SCOPE=$(gum input --placeholder "Enter custom scope...")
    SELECTED_SCOPE="$CUSTOM_SCOPE"
fi

echo "Selected scope: $SELECTED_SCOPE"

# If a scope is selected, wrap it in parentheses
test -n "$SELECTED_SCOPE" && SELECTED_SCOPE="($SELECTED_SCOPE)"

# Prompt for commit summary, pre-filled with the type and optional scope
SUMMARY=$(gum input --value "$TYPE$SELECTED_SCOPE: " --placeholder "Summary of this change")

# Prompt for commit description
DESCRIPTION=$(gum write --placeholder "Details of this change")

# Confirm and commit the changes
gum confirm "Commit changes?" && git commit -m "$SUMMARY" -m "$DESCRIPTION"
