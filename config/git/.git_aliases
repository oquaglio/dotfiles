[alias]
	co = checkout
	br = branch
	ci = commit
	st = status

	lf = !"git l --invert-grep --grep '#wip' --grep '#irrelevant'"	# filter out #wip and #irrelevant entries
	l1 = !"git l --since=1.weeks"
	l4 = !"git l --since=4.weeks"

	l = !"git lg1 -50"

	lg1 = !"git lg1-specific"
	lg2 = !"git lg2-specific"
	lg3 = !"git lg3-specific"

	lg1-specific = log --graph --abbrev-commit --relative-date --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) [%C(dim white)%an%C(reset)%C(auto) <%ce>]%d%C(reset)'
	lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
	lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

	f = fetch
	# fetch with notes
	fn = "!git fetch && git fetch origin refs/notes/commits:refs/notes/commits && git fetch origin "refs/notes/*:refs/notes/*""

	####################################################################################################################
	#
	# Remote
	#
	####################################################################################################################

	# Get all details about what's on a remote (e.g. origin)
	o = remote show origin


	####################################################################################################################
	#
	#
	#
	# Local Repository
	# The local repository is a hidden directory (.git) including an objects directory containing all versions of every
	# file in the repo (local branches and copies of remote branches) as a compressed "blob" file.
	#
	# HEAD Pointer
	# Points to the commit you are currently working on. Typically points at the same place the Branch pointer of the branch
	# you are on is pointing to. Can also be 'detached' and point at some other commit.
	#
	# https://stackoverflow.com/questions/3689838/whats-the-difference-between-head-working-tree-and-index-in-git#3690796
	#
	####################################################################################################################

	# Verify origin (used for fetch and push)
	r = remote -v

	####################################################################
	# Working Tree / Working Directory / Workspace
	# The Working Tree is the directory tree of (source) files that you see and edit. It is the state of the files
	# in checkout.
	####################################################################

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	#st = status							# list changed files in the Working Tree relative to the Index (both tracked and untracked)
	dl = diff --name-only				# same as above, but just the files
	#d = diff                   			# show changes to files in the Working Tree relative to the Index
	dh = diff HEAD						# show changes to files in the Working Tree relative to the last Commit (HEAD)
	dhl = diff --name-only HEAD			# list changed files in the Working Tree relative to the last Commit (HEAD)
	cl = clean -d -x -f     			# remove all untracked files from working directory
	rfc = rm --cached            		# remove file from Staging without deleting from working
	co = checkout
	com = checkout master
	resh = reset --hard					# Reset Working Tree and Index to commit pointed at by HEAD (or specify specific commit as additional parameter)

	# Hard reset to HEAD and remove all untracked files and directories (⚠️ destructive!)
	nuke = "!git reset --hard && git clean -fd"

	####################################################################
	# Index / Staging Area
	# The index is a single, large, binary file in <baseOfRepo>/.git/index, which lists all files in
	# the current branch, their sha1 checksums, time stamps and the file name -- it is not another directory with a copy
	# of files in it.  Essentially, the contents of the index are what will go into the new commit.
	# Also known as: Cache, Directory Cache, Current Directory Cache, Staging Area, Staged Files.
	####################################################################

	ls=ls-files                 	# list all files in the Index
	lss=ls-files -s	   				# list files in the Index (with additional metadata)
	dc = diff --cached				# show changes to files in the Index relative to the last Commit
	ds = diff --staged         		# same as above?
	aa = add .                   	# (a)dd (a)ll changed files in Working Tree to Index
	at = add -u 					# (a)dd only (t)racked changed files from Working tree to Index
	ri = reset                  	# Reset Index - remove all changes from Index leaving working tree unchanged
	files = '!git ls-files -z | xargs -0 -I{} sh -c 'echo "$(git log -1 --format="%ai" -- "{}") $(stat -c%s "{}") {}"' | sort -r' # list all files recursive sorted by modified include size in bytes


	####################################################################
	# Repository
	#
	####################################################################

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	dpl = diff --name-only HEAD^ HEAD	# list changed files in the last commit relative to the commit before that
	dp = diff HEAD^ HEAD				# show changes to files in the last commit relative to the commit before that
	cm = commit -m
	c = commit -av              		# automatically add modified and deleted files to the Index then commit to respository; verbose - will show diff in text editor for commit message
	ca = commit --amend					# update comment on last commit


	####################################################################
	# Branching
	#
	# Branch Pointer
	# points to the latest commit along a branch tree (it is automatically updated when you commit).
	####################################################################

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

	b = branch -a -vv           	# list all (b)ranch pointers
	ub = branch --no-merged master  # list all (u)merged (b)ranchnes (onto master)
	db = branch -D             		# delete branch even if not merged
	nb = checkout -b            	# create new branch and switch to it; doesn't affect Working Tree or Index?


	####################################################################
	# Merging
	####################################################################

	# A safer way than pull - only merge if no conflicts (ff)
	up = "!git remote update -p; git merge --ff-only @{u}"

	ms = "!f(){ git checkout master && git merge --squash \"$1\" && git commit; };f"	# squash merge <commit> onto master brach, e.g. "g ms <non master branch>"
	m = merge
	mt = mergetool


	sa = stash
	cp = cherry-pick
	pl = pull --rebase
	ss = show --stat            	# show the details of commit defaulting to last commit, e.g. "g ss", "g ss <tag>", "g ss <branch>" etc
	pa = push --all origin

	f = fetch

	gr = grep --ignore-case -n
	sz = count-objects -v

	# push all to origin, then prune remote, then prune stale references
	pap = "!git push --all origin && git push --all --prune && git fetch -p"
	# push with notes
	papn = "!git push --all origin && git push origin refs/notes/commits && git push origin "refs/notes/*" && git push --all --prune && git fetch -p #"

	# Update - git reset --hard does the same thing
	# Reset (Completely destory working directory and reset from branch)
	# * switch to a branch <version or branch>
	# * reset all tracked files to branch version
	# * remove all untracked files (clean)
	# usage: git res <version or branch>
	# Notes:
	# * "git checkout -- ."  will clear working directory
	res = "!git checkout -- . && git co \"$1\" && git reset HEAD && git clean -d -x -f && git st #"
	#res = "!f() { git co \"$1\" && git reset HEAD && git clean -d -x -f && git st; }; f"
	#res = !sh -c 'git clean -df && git checkout -- . && git co $1 && git reset HEAD && git clean -d -x -f && git st;' -

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Objects

	# Display object details, e.g. git do 8029c07
	do = "!f() { git cat-file -t $1 && git cat-file -p $1; }; f"


	####################################################################
	# Tagging
	####################################################################

	# Create and push a tag (but check if exists first)
	push-tag = "!f() { \
		if git rev-parse $1 >/dev/null 2>&1; then \
			echo \"Tag '$1' already exists.\"; \
		else \
			git tag -a $1 -m \"${2:-}\" && \
			git push origin $1; \
		fi \
	}; f"

	# Delete tag from local and remote
	delete-tag = "!f() { \
		if git rev-parse $1 >/dev/null 2>&1; then \
			git tag -d $1 && echo \"Deleted local tag $1\"; \
			git push --delete origin $1 && echo \"Deleted remote tag $1\"; \
		else \
			echo \"Tag '$1' does not exist.\"; \
		fi \
	}; f"



	####################################################################
	# Settings
	####################################################################

	set = "!f() { git config --list --show-origin && git config --list --local && git config --list --global && git config --list --system; }; f"
