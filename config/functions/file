###############################################################################
# Functions to detect file changes
#
#   Access - the last time the file was read
#   Modify - the last time the file content has been modified OR file has been
#            saved
#   Change - the last time meta data of the file was changed (e.g. permissions)
#            AND also when file is modified
#
#   Notes
#          - Linux does not track the creation time
#          - can't rely on modified time to detect new files from installs
#	         as it can remain an older time (presume from original creating
#			 time)
###############################################################################
# start find changes - set MARK modificaton time to now
sfch() {
	mkdir -p $HOME/temp
	touch -m $HOME/temp/MARK
}

# find modified files since MARK was modified
# usage:
# 	sudo fch
# 	fch ~ 		only check home(~) dir for changes
fch() {
    if [ -z "$1" ]; then
        echo "Usage: fch <path>"
        return 1
    fi

    log_dir="$HOME/logs/install"
    mkdir -p -- "$log_dir" || { echo "Failed to create log directory: $log_dir"; return 1; }

    current_datetime=$(date +"%Y%m%d-%H%M%S")
    current_datetime_full=$(date +"%Y-%m-%d %H:%M:%S")
    log_filename="${current_datetime}-file-changes.log"
    log_filepath="$log_dir/$log_filename"

    echo "Writing changed files to: '$log_filepath'"

    # Attempt to get the modified time of MARK and handle errors
    mark_filepath="$HOME/temp/MARK"
    if ! date_of_mark=$(date -r "$mark_filepath" +"%Y-%m-%d %H:%M:%S" 2>/dev/null); then
        echo "The mark file '$mark_filepath' does not exist or cannot be read."
        return 1
    fi

    echo "Searching for files modified after $date_of_mark at $current_datetime_full..."

    # Run the find command and write results to the log file and stdout
    # -newerct = inode status change time 
    # -newerat = access time 
    # -newermt = modified time
    # -newerBt = birth time
    # addition to -newermt for modification time. It uses a logical OR (-o) between these
    # conditions, meaning it will find files that meet any of these criteria.
    {
        find "${1:-$HOME}" -type d \( -name .mozilla -o -name .cache \) -prune -o \
            -path /mnt -prune -o \
            -path /dev -prune -o \
            -path /var/cache -prune -o \
            -path /run -prune -o \
            -path /tmp -prune -o \
            -path /sys -prune -o \
            -path /proc -prune -o \
            \( -newermt "$date_of_mark" -o -newerct "$date_of_mark" \) \
            -printf "[Acc: %AY-%Am-%Ad %AH:%AM:%.2AS] [Mod: %TY-%Tm-%Td %TH:%TM:%.2TS] [Chg: %CY-%Cm-%Cd %CH:%CM:%.2CS] %p\n"
    } | tee -a "$log_filepath"

    echo "Done. File changes written to: '$log_filepath'"
}
